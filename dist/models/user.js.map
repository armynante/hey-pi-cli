{"version":3,"sources":["../../src/models/user.js"],"names":[],"mappings":";;;;;;;;;;;;wBAAkB,cAAc;;;;wBACb,cAAc;;;;wBACd,UAAU;;;;2BACP,iBAAiB;;;;4BACvB,cAAc;;;;AAC9B,IAAI,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;;IAER,IAAI;AAEJ,WAFA,IAAI,CAEH,KAAK,EAAE;0BAFR,IAAI;;AAGb,QAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,QAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACnB,QAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AACvB,QAAI,CAAC,OAAO,GAAG,CAAC,CAAC;AACjB,QAAI,CAAC,OAAO,GAAG,CAAC,CAAC;AACjB,QAAI,CAAC,OAAO,GAAG,KAAK,CAAC;AACrB,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,QAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAChB,QAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACf,QAAI,CAAC,SAAS,GAAG,GAAG,CAAC;GACtB;;eAbU,IAAI;;WAiBX,gBAAG;;;AACL,UAAI,OAAO,GAAG,IAAI,OAAO,CACvB,UAAC,OAAO,EAAE,MAAM,EAAK;AACnB,8BAAM,KAAK,CAAC,OAAO,QAAM,CAAC,IAAI,CAAC,UAAC,SAAS,EAAK;;AAE5C,cAAI,KAAK,GAAG,0BAAI,IAAI,CAAC,SAAS,EAAE,sBAAO,MAAM,EAAE;AAC7C,qBAAS,EAAE,KAAK;WACjB,CAAC,CAAC;;AAEH,iBAAO,SAAS,CAAC,MAAM,CAAC,CAAC;AACzB,mBAAS,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;AAC3B,iBAAO,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAC,CAAC,CAAC;SAC1C,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;AACd,gBAAM,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,OAAO,EAAC,GAAG,EAAC,CAAC,CAAC;SAChC,CAAC,CAAC;OACJ,CACF,CAAA;AACD,aAAO,OAAO,CAAC;KAChB;;;WAEU,qBAAC,IAAI,EAAE;;;AAChB,UAAI,OAAO,GAAG,IAAI,OAAO,CACvB,UAAC,OAAO,EAAE,MAAM,EAAK;AACnB,iCAAU,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,EAAK;AAC1C,iBAAK,QAAQ,GAAG,IAAI,CAAC;AACrB,iBAAO,CAAC,IAAI,CAAC,CAAC;SACf,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;AACd,gBAAM,CAAC,EAAC,IAAI,EAAC,GAAG,EAAE,OAAO,EAAE,GAAG,EAAC,CAAC,CAAC;SAClC,CAAC,CAAA;OACH,CACF,CAAA;AACD,aAAO,OAAO,CAAC;KAChB;;;SAnDU,IAAI","file":"user.js","sourcesContent":["import Mongo from '../server.js';\nimport config from '../config.js';\nimport bcrypt from 'bcryptjs';\nimport utilities from '../utilities.js';\nimport jwt from 'jsonwebtoken';\nlet now = new Date();\n\nexport class User {\n\n  constructor(email) {\n    this.email = email;\n    this.password = '';\n    this.confirmed = false;\n    this.numCols = 0;\n    this.numDocs = 0;\n    this.isGuest = false;\n    this.usersId = null;\n    this.writes = 0;\n    this.reads = 0;\n    this.createdOn = now;\n  }\n\n\n\n  save() {\n    var promise = new Promise(\n      (resolve, reject) => {\n        Mongo._save('users',this).then((savedUser) => {\n          //if the user is created assign a token\n          var token = jwt.sign(savedUser, config.secret, {\n            expiresIn: \"20d\" //24r\n          });\n          // remover clear text pass\n          delete savedUser['pass'];\n          savedUser['token'] = token;\n          resolve({code: 201, message: savedUser});\n        })\n        .catch((err) => {\n          reject({code:500,message:err});\n        });\n      }\n    )\n    return promise;\n  }\n\n  setPassword(pass) {\n    var promise = new Promise(\n      (resolve, reject) => {\n        utilities.generateHash(pass).then((hash) => {\n          this.password = hash;\n          resolve(hash);\n        })\n        .catch((err) => {\n          reject({code:500, message: err});\n        })\n      }\n    )\n    return promise;\n  }\n}\n"]}