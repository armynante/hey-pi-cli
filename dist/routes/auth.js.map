{"version":3,"sources":["../../src/routes/auth.js"],"names":[],"mappings":";;;;;;;;uBAAoB,SAAS;;;;wBACX,cAAc;;;;wBACb,cAAc;;;;wBACd,UAAU;;;;gCACF,sBAAsB;;;;2BAC3B,iBAAiB;;;;4BACvB,cAAc;;;;0BACP,aAAa;;;;AAEpC,IAAI,MAAM,GAAG,qBAAQ,MAAM,EAAE,CAAC;;AAI9B,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAC,UAAC,GAAG,EAAC,GAAG,EAAK;AACjC,KAAI,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;AAC3B,KAAI,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;;AAEzB,KAAI,IAAI,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC;;AAE3C,uBAAM,QAAQ,CAAC,CAAC,OAAO,EAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,EAAK;;AAE5D,MAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;AACxB,OAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;AAE3B,yBAAO,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAC,KAAK,EAAK;AAClD,QAAG,KAAK,EAAE;AACT,SAAI,KAAK,GAAG,0BAAI,IAAI,CAAC,IAAI,EAAE,sBAAO,MAAM,EAAE;AACzC,eAAS,EAAE,SAAS;MACpB,CAAC,CAAC;;AAEH,SAAI,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;AACtB,YAAO,IAAI,CAAC,MAAM,CAAC,CAAC;AACpB,SAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;AAC1B,QAAG,CAAC,MAAM,CAAC,MAAM,EAAE,EAAI,OAAO,EAAE,IAAI,CAAC,KAAK;AAC/B,gBAAU,EAAE,eAAe;AACzB,aAAO,EAAE,KAAK;MACf,CAAC,CAAC;KAEd,MAAM;AACN,QAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,SAAS,EAAC,oBAAoB,EAAC,CAAC,CAAC;KACzE;IAED,CAAC,CAAC;GACH,MAAM;AACN,MAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,SAAS,EAAC,+BAA+B,EAAC,CAAC,CAAC;GACpF;EACD,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;AACf,KAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAC,CAAC,CAAA;EACxD,CAAC,CAAC;CACH,CAAC,CAAC;;AAEH,MAAM,CAAC,IAAI,CAAC,GAAG,EAAC,UAAC,GAAG,EAAC,GAAG,EAAK;AAC5B,KAAI,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;AAC9C,KAAI,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC;;AAE3C,KAAI,IAAI,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC;;AAE3C,uBAAM,QAAQ,CAAC,CAAC,OAAO,EAAC,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,EAAK;;AAE5D,MAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;AACxB,OAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;;AAE3B,yBAAO,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAC,KAAK,EAAK;AAClD,QAAG,KAAK,EAAE;AACT,SAAI,KAAK,GAAG,0BAAI,IAAI,CAAC,IAAI,EAAE,sBAAO,MAAM,EAAE;AACzC,eAAS,EAAE,KAAK;MAChB,CAAC,CAAC;;AAEH,SAAI,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;AACtB,YAAO,IAAI,CAAC,MAAM,CAAC,CAAC;AACpB,SAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;AAC1B,QAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAEf,MAAM;AACN,QAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAC,oBAAoB,EAAC,CAAC,CAAC;KACrE;IAED,CAAC,CAAC;GACH,MAAM;AACN,MAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAC,+BAA+B,EAAC,CAAC,CAAC;GAChF;EACD,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;AACf,KAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;EACzB,CAAC,CAAC;CACH,CAAC,CAAC;;qBAGY,MAAM","file":"auth.js","sourcesContent":["import express from 'express'\nimport Mongo from '../server.js';\nimport config from '../config.js';\nimport bcrypt from 'bcryptjs';\nimport collectionUtil from '../collectionUtil.js';\nimport utilities from '../utilities.js';\nimport jwt from 'jsonwebtoken';\nimport bodyParser from 'body-parser';\n\nvar router = express.Router();\n\n\n\nrouter.post('/login',(req,res) => {\n\tvar email = req.body.email;\n\tvar pass = req.body.pass;\n\n\tvar user = { \"email\": email, \"pass\": pass};\n\t//find user and test pass\n\tMongo._getData(['users','email_is_' + email]).then((resp) => {\n\t\t//if we get a match\n\t\tif (resp.message.length) {\n\t\t\tvar user = resp.message[0];\n\t\t\t//test the password\n\t\t\tbcrypt.compare(pass, user.password, (err,valid) => {\n\t\t\t\tif(valid) {\n\t\t\t\t\tvar token = jwt.sign(user, config.secret, {\n\t\t\t\t\t\texpiresIn: \"30 days\" //24r\n\t\t\t\t\t});\n\n\t\t\t\t\tuser['token'] = token;\n\t\t\t\t\tdelete user['pass'];\n\t\t\t\t\tuser['authorized'] = true;\n\t\t\t\t\tres.render('home', {   \"email\": user.email,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \"password\": \"your_password\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \"token\": token\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  });\n\n\t\t\t\t} else {\n\t\t\t\t\tres.status(401).json({\"success\": false, \"message\":\"password incorrect\"});\n\t\t\t\t}\n\n\t\t\t});\n\t\t} else {\n\t\t\tres.status(404).json({\"success\": false, \"message\":\"no user found with that email\"});\n\t\t}\n\t})\n\t.catch((err) => {\n\t\tres.status(500).json({\"success\": false, \"message\": err})\n\t});\n});\n\nrouter.post('/',(req,res) => {\n\tvar email = req.body.email || req.query.email;\n\tvar pass = req.body.pass || req.query.pass;\n\n\tvar user = { \"email\": email, \"pass\": pass};\n\t//find user and test pass\n\tMongo._getData(['users','email_is_' + email]).then((resp) => {\n\t\t//if we get a match\n\t\tif (resp.message.length) {\n\t\t\tvar user = resp.message[0];\n\t\t\t//test the password\n\t\t\tbcrypt.compare(pass, user.password, (err,valid) => {\n\t\t\t\tif(valid) {\n\t\t\t\t\tvar token = jwt.sign(user, config.secret, {\n\t\t\t\t\t\texpiresIn: \"30d\" //24r\n\t\t\t\t\t});\n\n\t\t\t\t\tuser['token'] = token;\n\t\t\t\t\tdelete user['pass'];\n\t\t\t\t\tuser['authorized'] = true;\n\t\t\t\t\tres.json(user);\n\n\t\t\t\t} else {\n\t\t\t\t\tres.status(401).json({success: false, message:\"password incorrect\"});\n\t\t\t\t}\n\n\t\t\t});\n\t\t} else {\n\t\t\tres.status(404).json({success: false, message:\"no user found with that email\"});\n\t\t}\n\t})\n\t.catch((err) => {\n\t\tres.status(500).json(err)\n\t});\n});\n\n\nexport default router;\n"]}